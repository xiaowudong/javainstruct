package com.xwd.study.javastruct;
import java.util.HashMap;
import java.util.Map;
class FiveTuple<A,B,C,D,E> {
	  public final A mnemonic;
	  public final B opcode;
	  public final C otherBytes;
	  public final D stack;
	  public final E description;
	  public FiveTuple(A a, B b,C c,D d,E e) { 
		  mnemonic = a; 
		  opcode = b; 
		  otherBytes=c;
		  stack=d;
		  description=e;
	  }
	}

public class InfoMap {
	static Map<String,FiveTuple<String,String,String,String,String>> infoMap=new HashMap<String,FiveTuple<String,String,String,String,String>>();
	static{
		FiveTuple<String,String,String,String,String> fiveTuple=null;
		fiveTuple=new FiveTuple<String,String,String,String,String>("aaload","32","","arrayref, index → value","load onto the stack a reference from an array");
		infoMap.put("aaload",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("aastore","53","","arrayref, index, value →","store into a reference in an array");
		infoMap.put("aastore",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("aconst_null","01","","→ null","push a null reference onto the stack");
		infoMap.put("aconst_null",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("aload","19","1: index","→ objectref","load a reference onto the stack from a local variable #index");
		infoMap.put("aload",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("aload_0","2a","","→ objectref","load a reference onto the stack from local variable 0");
		infoMap.put("aload_0",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("aload_1","2b","","→ objectref","load a reference onto the stack from local variable 1");
		infoMap.put("aload_1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("aload_2","2c","","→ objectref","load a reference onto the stack from local variable 2");
		infoMap.put("aload_2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("aload_3","2d","","→ objectref","load a reference onto the stack from local variable 3");
		infoMap.put("aload_3",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("anewarray","bd","2: indexbyte1, indexbyte2","count → arrayref","create a new array of references of length count and component type identified by the class referenceindex (indexbyte1 << 8 + indexbyte2) in the constant pool");
		infoMap.put("anewarray",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("areturn","b0","","objectref → [empty]","return a reference from a method");
		infoMap.put("areturn",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("arraylength","be","","arrayref → length","get the length of an array");
		infoMap.put("arraylength",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("astore","3a","1: index","objectref →","store a reference into a local variable #index");
		infoMap.put("astore",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("astore_0","4b","","objectref →","store a reference into local variable 0");
		infoMap.put("astore_0",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("astore_1","4c","","objectref →","store a reference into local variable 1");
		infoMap.put("astore_1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("astore_2","4d","","objectref →","store a reference into local variable 2");
		infoMap.put("astore_2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("astore_3","4e","","objectref →","store a reference into local variable 3");
		infoMap.put("astore_3",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("athrow","bf","","objectref → [empty], objectref","throws an error or exception (notice that the rest of the stack is cleared, leaving only a reference to the Throwable)");
		infoMap.put("athrow",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("baload","33","","arrayref, index → value","load a byte or Boolean value from an array");
		infoMap.put("baload",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("bastore","54","","arrayref, index, value →","store a byte or Boolean value into an array");
		infoMap.put("bastore",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("bipush","10","1: byte","→ value","push a byte onto the stack as an integer value");
		infoMap.put("bipush",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("breakpoint","ca","","","reserved for breakpoints in Java debuggers; should not appear in any class file");
		infoMap.put("breakpoint",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("caload","34","","arrayref, index → value","load a char from an array");
		infoMap.put("caload",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("castore","55","","arrayref, index, value →","store a char into an array");
		infoMap.put("castore",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("checkcast","c0","2: indexbyte1, indexbyte2","objectref → objectref","checks whether an objectref is of a certain type, the class reference of which is in the constant pool at index (indexbyte1 << 8 + indexbyte2)");
		infoMap.put("checkcast",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("d2f","90","","value → result","convert a double to a float");
		infoMap.put("d2f",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("d2i","8e","","value → result","convert a double to an int");
		infoMap.put("d2i",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("d2l","8f","","value → result","convert a double to a long");
		infoMap.put("d2l",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dadd","63","","value1, value2 → result","add two doubles");
		infoMap.put("dadd",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("daload","31","","arrayref, index → value","load a double from an array");
		infoMap.put("daload",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dastore","52","","arrayref, index, value →","store a double into an array");
		infoMap.put("dastore",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dcmpg","98","","value1, value2 → result","compare two doubles");
		infoMap.put("dcmpg",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dcmpl","97","","value1, value2 → result","compare two doubles");
		infoMap.put("dcmpl",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dconst_0","0e","","→ 0.0","push the constant 0.0 onto the stack");
		infoMap.put("dconst_0",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dconst_1","0f","","→ 1.0","push the constant 1.0 onto the stack");
		infoMap.put("dconst_1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ddiv","6f","","value1, value2 → result","divide two doubles");
		infoMap.put("ddiv",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dload","18","1: index","→ value","load a double value from a local variable #index");
		infoMap.put("dload",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dload_0","26","","→ value","load a double from local variable 0");
		infoMap.put("dload_0",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dload_1","27","","→ value","load a double from local variable 1");
		infoMap.put("dload_1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dload_2","28","","→ value","load a double from local variable 2");
		infoMap.put("dload_2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dload_3","29","","→ value","load a double from local variable 3");
		infoMap.put("dload_3",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dmul","6b","","value1, value2 → result","multiply two doubles");
		infoMap.put("dmul",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dneg","77","","value → result","negate a double");
		infoMap.put("dneg",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("drem","73","","value1, value2 → result","get the remainder from a division between two doubles");
		infoMap.put("drem",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dreturn","af","","value → [empty]","return a double from a method");
		infoMap.put("dreturn",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dstore","39","1: index","value →","store a double value into a local variable #index");
		infoMap.put("dstore",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dstore_0","47","","value →","store a double into local variable 0");
		infoMap.put("dstore_0",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dstore_1","48","","value →","store a double into local variable 1");
		infoMap.put("dstore_1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dstore_2","49","","value →","store a double into local variable 2");
		infoMap.put("dstore_2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dstore_3","4a","","value →","store a double into local variable 3");
		infoMap.put("dstore_3",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dsub","67","","value1, value2 → result","subtract a double from another");
		infoMap.put("dsub",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dup","59","","value → value, value","duplicate the value on top of the stack");
		infoMap.put("dup",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dup_x1","5a","","value2, value1 → value1, value2, value1","insert a copy of the top value into the stack two values from the top. value1 and value2 must not be of the type double or long.");
		infoMap.put("dup_x1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dup_x2","5b","","value3, value2, value1 → value1, value3, value2, value1","insert a copy of the top value into the stack two (if value2 is double or long it takes up the entry of value3, too) or three values (if value2 is neither double nor long) from the top");
		infoMap.put("dup_x2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dup2","5c","","{value2, value1} → {value2, value1}, {value2, value1}","duplicate top two stack words (two values, if value1 is not double nor long; a single value, if value1 is double or long)");
		infoMap.put("dup2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dup2_x1","5d","","value3, {value2, value1} → {value2, value1}, value3, {value2, value1}","duplicate two words and insert beneath third word (see explanation above)");
		infoMap.put("dup2_x1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("dup2_x2","5e","","{value4, value3}, {value2, value1} → {value2, value1}, {value4, value3}, {value2, value1}","duplicate two words and insert beneath fourth word");
		infoMap.put("dup2_x2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("f2d","8d","","value → result","convert a float to a double");
		infoMap.put("f2d",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("f2i","8b","","value → result","convert a float to an int");
		infoMap.put("f2i",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("f2l","8c","","value → result","convert a float to a long");
		infoMap.put("f2l",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fadd","62","","value1, value2 → result","add two floats");
		infoMap.put("fadd",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("faload","30","","arrayref, index → value","load a float from an array");
		infoMap.put("faload",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fastore","51","","arrayref, index, value →","store a float in an array");
		infoMap.put("fastore",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fcmpg","96","","value1, value2 → result","compare two floats");
		infoMap.put("fcmpg",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fcmpl","95","","value1, value2 → result","compare two floats");
		infoMap.put("fcmpl",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fconst_0","0b","","→ 0.0f","push 0.0f on the stack");
		infoMap.put("fconst_0",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fconst_1","0c","","→ 1.0f","push 1.0f on the stack");
		infoMap.put("fconst_1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fconst_2","0d","","→ 2.0f","push 2.0f on the stack");
		infoMap.put("fconst_2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fdiv","6e","","value1, value2 → result","divide two floats");
		infoMap.put("fdiv",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fload","17","1: index","→ value","load a float value from a local variable #index");
		infoMap.put("fload",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fload_0","22","","→ value","load a float value from local variable 0");
		infoMap.put("fload_0",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fload_1","23","","→ value","load a float value from local variable 1");
		infoMap.put("fload_1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fload_2","24","","→ value","load a float value from local variable 2");
		infoMap.put("fload_2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fload_3","25","","→ value","load a float value from local variable 3");
		infoMap.put("fload_3",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fmul","6a","","value1, value2 → result","multiply two floats");
		infoMap.put("fmul",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fneg","76","","value → result","negate a float");
		infoMap.put("fneg",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("frem","72","","value1, value2 → result","get the remainder from a division between two floats");
		infoMap.put("frem",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("freturn","ae","","value → [empty]","return a float");
		infoMap.put("freturn",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fstore","38","1: index","value →","store a float value into a local variable #index");
		infoMap.put("fstore",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fstore_0","43","","value →","store a float value into local variable 0");
		infoMap.put("fstore_0",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fstore_1","44","","value →","store a float value into local variable 1");
		infoMap.put("fstore_1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fstore_2","45","","value →","store a float value into local variable 2");
		infoMap.put("fstore_2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fstore_3","46","","value →","store a float value into local variable 3");
		infoMap.put("fstore_3",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("fsub","66","","value1, value2 → result","subtract two floats");
		infoMap.put("fsub",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("getfield","b4","2: index1, index2","objectref → value","get a field value of an object objectref, where the field is identified by field reference in the constant pool index (index1 << 8 + index2)");
		infoMap.put("getfield",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("getstatic","b2","2: index1, index2","→ value","get a static field value of a class, where the field is identified by field reference in the constant pool index (index1 << 8 + index2)");
		infoMap.put("getstatic",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("goto","a7","2: branchbyte1, branchbyte2","[no change]","goes to another instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 + branchbyte2)");
		infoMap.put("goto",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("goto_w","c8","4: branchbyte1, branchbyte2, branchbyte3, branchbyte4","[no change]","goes to another instruction at branchoffset (signed int constructed from unsigned bytes branchbyte1 << 24 + branchbyte2 << 16 + branchbyte3 << 8 + branchbyte4)");
		infoMap.put("goto_w",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("i2b","91","","value → result","convert an int into a byte");
		infoMap.put("i2b",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("i2c","92","","value → result","convert an int into a character");
		infoMap.put("i2c",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("i2d","87","","value → result","convert an int into a double");
		infoMap.put("i2d",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("i2f","86","","value → result","convert an int into a float");
		infoMap.put("i2f",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("i2l","85","","value → result","convert an int into a long");
		infoMap.put("i2l",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("i2s","93","","value → result","convert an int into a short");
		infoMap.put("i2s",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iadd","60","","value1, value2 → result","add two ints");
		infoMap.put("iadd",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iaload","2e","","arrayref, index → value","load an int from an array");
		infoMap.put("iaload",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iand","7e","","value1, value2 → result","perform a bitwise and on two integers");
		infoMap.put("iand",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iastore","4f","","arrayref, index, value →","store an int into an array");
		infoMap.put("iastore",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iconst_m1","02","","→ -1","load the int value -1 onto the stack");
		infoMap.put("iconst_m1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iconst_0","03","","→ 0","load the int value 0 onto the stack");
		infoMap.put("iconst_0",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iconst_1","04","","→ 1","load the int value 1 onto the stack");
		infoMap.put("iconst_1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iconst_2","05","","→ 2","load the int value 2 onto the stack");
		infoMap.put("iconst_2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iconst_3","06","","→ 3","load the int value 3 onto the stack");
		infoMap.put("iconst_3",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iconst_4","07","","→ 4","load the int value 4 onto the stack");
		infoMap.put("iconst_4",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iconst_5","08","","→ 5","load the int value 5 onto the stack");
		infoMap.put("iconst_5",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("idiv","6c","","value1, value2 → result","divide two integers");
		infoMap.put("idiv",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("if_acmpeq","a5","2: branchbyte1, branchbyte2","value1, value2 →","if references are equal, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 + branchbyte2)");
		infoMap.put("if_acmpeq",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("if_acmpne","a6","2: branchbyte1, branchbyte2","value1, value2 →","if references are not equal, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 + branchbyte2)");
		infoMap.put("if_acmpne",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("if_icmpeq","9f","2: branchbyte1, branchbyte2","value1, value2 →","if ints are equal, branch to instruction at branchoffset (signed short constructed from unsigned bytesbranchbyte1 << 8 + branchbyte2)");
		infoMap.put("if_icmpeq",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("if_icmpge","a2","2: branchbyte1, branchbyte2","value1, value2 →","if value1 is greater than or equal to value2, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 + branchbyte2)");
		infoMap.put("if_icmpge",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("if_icmpgt","a3","2: branchbyte1, branchbyte2","value1, value2 →","if value1 is greater than value2, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 + branchbyte2)");
		infoMap.put("if_icmpgt",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("if_icmple","a4","2: branchbyte1, branchbyte2","value1, value2 →","if value1 is less than or equal to value2, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 + branchbyte2)");
		infoMap.put("if_icmple",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("if_icmplt","a1","2: branchbyte1, branchbyte2","value1, value2 →","if value1 is less than value2, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 + branchbyte2)");
		infoMap.put("if_icmplt",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("if_icmpne","a0","2: branchbyte1, branchbyte2","value1, value2 →","if ints are not equal, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 + branchbyte2)");
		infoMap.put("if_icmpne",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ifeq","99","2: branchbyte1, branchbyte2","value →","if value is 0, branch to instruction at branchoffset (signed short constructed from unsigned bytesbranchbyte1 << 8 + branchbyte2)");
		infoMap.put("ifeq",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ifge","9c","2: branchbyte1, branchbyte2","value →","if value is greater than or equal to 0, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 + branchbyte2)");
		infoMap.put("ifge",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ifgt","9d","2: branchbyte1, branchbyte2","value →","if value is greater than 0, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 + branchbyte2)");
		infoMap.put("ifgt",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ifle","9e","2: branchbyte1, branchbyte2","value →","if value is less than or equal to 0, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 + branchbyte2)");
		infoMap.put("ifle",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iflt","9b","2: branchbyte1, branchbyte2","value →","if value is less than 0, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 + branchbyte2)");
		infoMap.put("iflt",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ifne","9a","2: branchbyte1, branchbyte2","value →","if value is not 0, branch to instruction at branchoffset (signed short constructed from unsigned bytesbranchbyte1 << 8 + branchbyte2)");
		infoMap.put("ifne",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ifnonnull","c7","2: branchbyte1, branchbyte2","value →","if value is not null, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 + branchbyte2)");
		infoMap.put("ifnonnull",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ifnull","c6","2: branchbyte1, branchbyte2","value →","if value is null, branch to instruction at branchoffset (signed short constructed from unsigned bytesbranchbyte1 << 8 + branchbyte2)");
		infoMap.put("ifnull",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iinc","84","2: index, const","[No change]","increment local variable #index by signed byte const");
		infoMap.put("iinc",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iload","15","1: index","→ value","load an int value from a local variable #index");
		infoMap.put("iload",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iload_0","1a","","→ value","load an int value from local variable 0");
		infoMap.put("iload_0",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iload_1","1b","","→ value","load an int value from local variable 1");
		infoMap.put("iload_1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iload_2","1c","","→ value","load an int value from local variable 2");
		infoMap.put("iload_2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iload_3","1d","","→ value","load an int value from local variable 3");
		infoMap.put("iload_3",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("impdep1","fe","","","reserved for implementation-dependent operations within debuggers; should not appear in any class file");
		infoMap.put("impdep1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("impdep2","ff","","","reserved for implementation-dependent operations within debuggers; should not appear in any class file");
		infoMap.put("impdep2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("imul","68","","value1, value2 → result","multiply two integers");
		infoMap.put("imul",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ineg","74","","value → result","negate int");
		infoMap.put("ineg",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("instanceof","c1","2: indexbyte1, indexbyte2","objectref → result","determines if an object objectref is of a given type, identified by class reference index in constant pool (indexbyte1 << 8 + indexbyte2)");
		infoMap.put("instanceof",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("invokedynamic","ba","4: indexbyte1, indexbyte2, 0, 0","[arg1, [arg2 ...]] →","invokes a dynamic method identified by method reference index in constant pool (indexbyte1 << 8 + indexbyte2)");
		infoMap.put("invokedynamic",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("invokeinterface","b9","4: indexbyte1, indexbyte2, count, 0","objectref, [arg1, arg2, ...] →","invokes an interface method on object objectref, where the interface method is identified by method reference index in constant pool (indexbyte1 << 8 + indexbyte2)");
		infoMap.put("invokeinterface",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("invokespecial","b7","2: indexbyte1, indexbyte2","objectref, [arg1, arg2, ...] →","invoke instance method on object objectref, where the method is identified by method reference indexin constant pool (indexbyte1 << 8 + indexbyte2)");
		infoMap.put("invokespecial",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("invokestatic","b8","2: indexbyte1, indexbyte2","[arg1, arg2, ...] →","invoke a static method, where the method is identified by method reference index in constant pool (indexbyte1 << 8 + indexbyte2)");
		infoMap.put("invokestatic",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("invokevirtual","b6","2: indexbyte1, indexbyte2","objectref, [arg1, arg2, ...] →","invoke virtual method on object objectref, where the method is identified by method reference index in constant pool (indexbyte1 << 8 + indexbyte2)");
		infoMap.put("invokevirtual",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ior","80","","value1, value2 → result","bitwise int or");
		infoMap.put("ior",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("irem","70","","value1, value2 → result","logical int remainder");
		infoMap.put("irem",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ireturn","ac","","value → [empty]","return an integer from a method");
		infoMap.put("ireturn",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ishl","78","","value1, value2 → result","int shift left");
		infoMap.put("ishl",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ishr","7a","","value1, value2 → result","int arithmetic shift right");
		infoMap.put("ishr",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("istore","36","1: index","value →","store int value into variable #index");
		infoMap.put("istore",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("istore_0","3b","","value →","store int value into variable 0");
		infoMap.put("istore_0",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("istore_1","3c","","value →","store int value into variable 1");
		infoMap.put("istore_1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("istore_2","3d","","value →","store int value into variable 2");
		infoMap.put("istore_2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("istore_3","3e","","value →","store int value into variable 3");
		infoMap.put("istore_3",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("isub","64","","value1, value2 → result","int subtract");
		infoMap.put("isub",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("iushr","7c","","value1, value2 → result","int logical shift right");
		infoMap.put("iushr",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ixor","82","","value1, value2 → result","int xor");
		infoMap.put("ixor",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("jsr","a8","2: branchbyte1, branchbyte2","→ address","jump to subroutine at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 + branchbyte2) and place the return address on the stack");
		infoMap.put("jsr",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("jsr_w","c9","4: branchbyte1, branchbyte2, branchbyte3, branchbyte4","→ address","jump to subroutine at branchoffset (signed int constructed from unsigned bytes branchbyte1 << 24 + branchbyte2 << 16 + branchbyte3 << 8 + branchbyte4) and place the return address on the stack");
		infoMap.put("jsr_w",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("l2d","8a","","value → result","convert a long to a double");
		infoMap.put("l2d",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("l2f","89","","value → result","convert a long to a float");
		infoMap.put("l2f",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("l2i","88","","value → result","convert a long to a int");
		infoMap.put("l2i",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ladd","61","","value1, value2 → result","add two longs");
		infoMap.put("ladd",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("laload","2f","","arrayref, index → value","load a long from an array");
		infoMap.put("laload",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("land","7f","","value1, value2 → result","bitwise and of two longs");
		infoMap.put("land",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lastore","50","","arrayref, index, value →","store a long to an array");
		infoMap.put("lastore",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lcmp","94","","value1, value2 → result","compare two longs values");
		infoMap.put("lcmp",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lconst_0","09","","→ 0L","push the long 0 onto the stack");
		infoMap.put("lconst_0",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lconst_1","0a","","→ 1L","push the long 1 onto the stack");
		infoMap.put("lconst_1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ldc","12","1: index","→ value","push a constant #index from a constant pool (String, int or float) onto the stack");
		infoMap.put("ldc",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ldc_w","13","2: indexbyte1, indexbyte2","→ value","push a constant #index from a constant pool (String, int or float) onto the stack (wide index is constructed as indexbyte1 << 8 + indexbyte2)");
		infoMap.put("ldc_w",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ldc2_w","14","2: indexbyte1, indexbyte2","→ value","push a constant #index from a constant pool (double or long) onto the stack (wide index is constructed as indexbyte1 << 8 + indexbyte2)");
		infoMap.put("ldc2_w",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ldiv","6d","","value1, value2 → result","divide two longs");
		infoMap.put("ldiv",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lload","16","1: index","→ value","load a long value from a local variable #index");
		infoMap.put("lload",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lload_0","1e","","→ value","load a long value from a local variable 0");
		infoMap.put("lload_0",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lload_1","1f","","→ value","load a long value from a local variable 1");
		infoMap.put("lload_1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lload_2","20","","→ value","load a long value from a local variable 2");
		infoMap.put("lload_2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lload_3","21","","→ value","load a long value from a local variable 3");
		infoMap.put("lload_3",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lmul","69","","value1, value2 → result","multiply two longs");
		infoMap.put("lmul",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lneg","75","","value → result","negate a long");
		infoMap.put("lneg",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lookupswitch","ab","4+: <0-3 bytes padding>, defaultbyte1, defaultbyte2, defaultbyte3, defaultbyte4, npairs1, npairs2, npairs3, npairs4, match-offset pairs...","key →","a target address is looked up from a table using a key and execution continues from the instruction at that address");
		infoMap.put("lookupswitch",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lor","81","","value1, value2 → result","bitwise or of two longs");
		infoMap.put("lor",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lrem","71","","value1, value2 → result","remainder of division of two longs");
		infoMap.put("lrem",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lreturn","ad","","value → [empty]","return a long value");
		infoMap.put("lreturn",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lshl","79","","value1, value2 → result","bitwise shift left of a long value1 by value2 positions");
		infoMap.put("lshl",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lshr","7b","","value1, value2 → result","bitwise shift right of a long value1 by value2 positions");
		infoMap.put("lshr",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lstore","37","1: index","value →","store a long value in a local variable #index");
		infoMap.put("lstore",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lstore_0","3f","","value →","store a long value in a local variable 0");
		infoMap.put("lstore_0",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lstore_1","40","","value →","store a long value in a local variable 1");
		infoMap.put("lstore_1",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lstore_2","41","","value →","store a long value in a local variable 2");
		infoMap.put("lstore_2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lstore_3","42","","value →","store a long value in a local variable 3");
		infoMap.put("lstore_3",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lsub","65","","value1, value2 → result","subtract two longs");
		infoMap.put("lsub",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lushr","7d","","value1, value2 → result","bitwise shift right of a long value1 by value2 positions, unsigned");
		infoMap.put("lushr",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("lxor","83","","value1, value2 → result","bitwise exclusive or of two longs");
		infoMap.put("lxor",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("monitorenter","c2","","objectref →","enter monitor for object (\"grab the lock\"- start of synchronized() section)");
		infoMap.put("monitorenter",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("monitorexit","c3","","objectref →","exit monitor for object (\"release the lock\"- end of synchronized() section)");
		infoMap.put("monitorexit",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("multianewarray","c5","3: indexbyte1, indexbyte2, dimensions","count1, [count2,...] → arrayref","create a new array of dimensions dimensions with elements of type identified by class reference in constant pool index (indexbyte1 << 8 + indexbyte2); the sizes of each dimension is identified bycount1, [count2, etc.]");
		infoMap.put("multianewarray",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("new","bb","2: indexbyte1, indexbyte2","→ objectref","create new object of type identified by class reference in constant pool index (indexbyte1 << 8 + indexbyte2)");
		infoMap.put("new",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("newarray","bc","1: atype","count → arrayref","create new array with count elements of primitive type identified by atype");
		infoMap.put("newarray",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("nop","00","","[No change]","perform no operation");
		infoMap.put("nop",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("pop","57","","value →","discard the top value on the stack");
		infoMap.put("pop",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("pop2","58","","{value2, value1} →","discard the top two values on the stack (or one value, if it is a double or long)");
		infoMap.put("pop2",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("putfield","b5","2: indexbyte1, indexbyte2","objectref, value →","set field to value in an object objectref, where the field is identified by a field reference index in constant pool (indexbyte1 << 8 + indexbyte2)");
		infoMap.put("putfield",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("putstatic","b3","2: indexbyte1, indexbyte2","value →","set static field to value in a class, where the field is identified by a field reference index in constant pool (indexbyte1 << 8 + indexbyte2)");
		infoMap.put("putstatic",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("ret","a9","1: index","[No change]","continue execution from address taken from a local variable #index (the asymmetry with jsr is intentional)");
		infoMap.put("ret",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("return","b1","","→ [empty]","return void from method");
		infoMap.put("return",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("saload","35","","arrayref, index → value","load short from array");
		infoMap.put("saload",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("sastore","56","","arrayref, index, value →","store short to array");
		infoMap.put("sastore",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("sipush","11","2: byte1, byte2","→ value","push a short onto the stack");
		infoMap.put("sipush",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("swap","5f","","value2, value1 → value1, value2","swaps two top words on the stack (note that value1 and value2 must not be double or long)");
		infoMap.put("swap",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("tableswitch","aa","4+: [0-3 bytes padding], defaultbyte1, defaultbyte2, defaultbyte3, defaultbyte4, lowbyte1, lowbyte2, lowbyte3, lowbyte4, highbyte1, highbyte2, highbyte3, highbyte4, jump offsets...","index →","continue execution from an address in the table at offset index");
		infoMap.put("tableswitch",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("wide","c4","3/5: opcode, indexbyte1, indexbyte2 or iinc, indexbyte1, indexbyte2, countbyte1, countbyte2","[same as for corresponding instructions]","execute opcode, where opcode is either iload, fload, aload, lload, dload, istore, fstore, astore, lstore, dstore, or ret, but assume the index is 16 bit; or execute iinc, where the index is 16 bits and the constant to increment by is a signed 16 bit short");
		infoMap.put("wide",fiveTuple);
		fiveTuple=new FiveTuple<String,String,String,String,String>("noname","cb-fd","","","these values are currently unassigned for opcodes and are reserved for future use");
//		infoMap.put("noname",fiveTuple);
		
	}
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
	}

}
